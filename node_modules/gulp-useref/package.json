{
  "name": "gulp-useref",
  "version": "1.0.2",
  "description": "Parse build blocks in HTML files to replace references to non-optimized scripts or stylesheets.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "brace-expand-join": "^0.1.0",
    "glob": "^4.0.2",
    "gulp-util": "^3.0.0",
    "is-absolute-url": "^1.0.0",
    "node-useref": "^0.3.1",
    "strip-bom": "^0.3.1",
    "through2": "^0.6.1"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "gulp-mocha": "^1.0.0",
    "gulp-util": "^3.0.0",
    "gulp": "^3.6.1",
    "gulp-jshint": "^1.5.3"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonkemp/gulp-useref.git"
  },
  "keywords": [
    "gulpplugin",
    "html",
    "scripts",
    "css",
    "optimize",
    "concat"
  ],
  "author": {
    "name": "Jonathan Kemp",
    "email": "kempdogg@gmail.com",
    "url": "http://jonkemp.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jonkemp/gulp-useref/issues"
  },
  "homepage": "https://github.com/jonkemp/gulp-useref",
  "readme": "# [gulp](https://github.com/gulpjs/gulp)-useref [![Build Status](https://travis-ci.org/jonkemp/gulp-useref.png?branch=master)](https://travis-ci.org/jonkemp/gulp-useref)\n\n> Parse build blocks in HTML files to replace references to non-optimized scripts or stylesheets with [useref](https://github.com/digisfera/useref)\n\nInspired by the grunt plugin [grunt-useref](https://github.com/pajtai/grunt-useref). It can handle file concatenation but not minification. Files are then passed down the stream. For minification of assets or other modifications, use [gulp-filter](https://github.com/sindresorhus/gulp-filter) to filter specific types of assets.\n\n\n## Install\n\nInstall with [npm](https://npmjs.org/package/gulp-useref)\n\n```\nnpm install --save-dev gulp-useref\n```\n\n\n## Usage\n\nThe following example will parse the build blocks in the HTML, replace them and pass those files through. Assets inside the build blocks will be concatenated and passed through in a stream as well.\n\n```js\nvar gulp = require('gulp'),\n    useref = require('gulp-useref');\n\ngulp.task('default', function () {\n    var assets = useref.assets();\n    \n\treturn gulp.src('app/*.html')\n        .pipe(assets)\n        .pipe(assets.restore())\n        .pipe(useref())\n        .pipe(gulp.dest('dist'));\n});\n```\n\nIf you want to minify your assets or perform some other modification, you can use [gulp-if](https://github.com/robrich/gulp-if) to conditionally handle specific types of assets.\n\n```js\nvar gulp = require('gulp'),\n    useref = require('gulp-useref'),\n    gulpif = require('gulp-if'),\n    uglify = require('gulp-uglify'),\n    minifyCss = require('gulp-minify-css');\n\ngulp.task('html', function () {\n    var assets = useref.assets();\n    \n    return gulp.src('app/*.html')\n        .pipe(assets)\n        .pipe(gulpif('*.js', uglify()))\n        .pipe(gulpif('*.css', minifyCss()))\n        .pipe(assets.restore())\n        .pipe(useref())\n        .pipe(gulp.dest('dist'));\n});\n```\n\n\nBlocks are expressed as:\n\n```html\n<!-- build:<type>(alternate search path) <path> -->\n... HTML Markup, list of script / link tags.\n<!-- endbuild -->\n```\n\n- **type**: either `js`, `css` or `remove`; `remove` will remove the build block entirely without generating a file\n- **alternate search path**: (optional) By default the input files are relative to the treated file. Alternate search path allows one to change that\n- **path**: the file path of the optimized file, the target output\n\nAn example of this in completed form can be seen below:\n\n    <html>\n    <head>\n        <!-- build:css css/combined.css -->\n        <link href=\"css/one.css\" rel=\"stylesheet\">\n        <link href=\"css/two.css\" rel=\"stylesheet\">\n        <!-- endbuild -->\n    </head>\n    <body>\n        <!-- build:js scripts/combined.js -->\n        <script type=\"text/javascript\" src=\"scripts/one.js\"></script>\n        <script type=\"text/javascript\" src=\"scripts/two.js\"></script>\n        <!-- endbuild -->\n    </body>\n    </html>\n\n\nThe resulting HTML would be:\n\n    <html>\n    <head>\n        <link rel=\"stylesheet\" href=\"css/combined.css\"/>\n    </head>\n    <body>\n        <script src=\"scripts/combined.js\"></script>\n    </body>\n    </html>\n\n## API\n\n### useref.assets(options)\n\nReturns a stream with the concatenated asset files from the build blocks inside the HTML.\n\n#### options.searchPath\n\nType: `String` or `Array`  \nDefault: `none`  \n\nSpecify the location to search for asset files, relative to the current working directory. Can be a string or array of strings.\n\n### stream.restore()\n\nBrings back the previously filtered out HTML files.\n\n\n## Notes\n\n* [ClosureCompiler.js](https://github.com/dcodeIO/ClosureCompiler.js) doesn't support Buffers, which means if you want to use [gulp-closure-compiler](https://github.com/sindresorhus/gulp-closure-compiler) you'll have to first write out the `combined.js` to disk. See [this](https://github.com/dcodeIO/ClosureCompiler.js/issues/11) for more information.\n\n## Acknowledgments\n\n* Whitney Young ([@wbyoung](https://github.com/wbyoung)) for suggesting a separate stream for assets and the use of [gulp-filter](https://github.com/sindresorhus/gulp-filter) to filter assets.\n\n## Contributing\n\nSee the [CONTRIBUTING Guidelines](https://github.com/jonkemp/gulp-useref/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT Â© [Jonathan Kemp](http://jonkemp.com)\n",
  "readmeFilename": "README.md",
  "_id": "gulp-useref@1.0.2",
  "_shasum": "85a02ed77d2f7314975c196e42f02fa9088ba6bc",
  "_from": "gulp-useref@~1.0.1",
  "_resolved": "https://registry.npmjs.org/gulp-useref/-/gulp-useref-1.0.2.tgz"
}
